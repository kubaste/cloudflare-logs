#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

#error_log /var/log/nginx/error.log debug;


events {
    worker_connections  1024;
}

http {
    lua_package_path "/usr/local/openresty/site/lualib/resty/?.lua;/usr/local/openresty/site/lualib/resty/logger/?.lua;;";
    lua_package_cpath "/usr/local/openresty/zlib/lib/?.so;/usr/lib/x86_64-linux-gnu/lua/5.1/?.so;;";

    server {
        listen 80;
        server_name openresty.4prime.tech;
        lua_need_request_body on;
        gzip on;
        gzip_types text/plain application/json;
        gzip_proxied any;

        location / {
            chunked_transfer_encoding on;
            client_body_buffer_size 256M;
            client_max_body_size 10m;
            lua_need_request_body on;
            content_by_lua_block {
                local http = require "resty.http"
                local cjson = require "cjson"
                local logger = require "resty.logger.socket"

                -- Read request body
                ngx.req.read_body()
                local request_body = ngx.req.get_body_data()
                if not request_body then
                    ngx.log(ngx.ERR, "No request body received")
                    ngx.exit(ngx.HTTP_BAD_REQUEST)
                    return
                end

                if not logger.initted() then
                    local ok, err = logger.init{
                        host = "10.10.10.138",
                        port = 514,
                        sock_type = "tcp",
                        flush_limit = 1,
                        drop_limit = 1048576,
                        timeout = 5000,
                    }
                    if not ok then
                        ngx.log(ngx.ERR, "Failed to initialize the logger: ", err)
                        return
                    end
                end

                local function send_rsyslog(message)
                        -- Send request body to syslog
                        local bytes, err = logger.log(string.format(
                                '<5>%s %s %s[0]: %s\n',
                                os.date("!%Y-%m-%dT%H:%M:%SZ"),
                                "cloudflare",
                                "cloudflare",
                                message
                        ))
                        if not bytes then
                            ngx.log(ngx.ERR, "Failed to send log: ", err)
                        else
                            ngx.log(ngx.INFO, "Successfully sent log")
                        end
                end
                local function send_rsyslog_inflate(message)
                        local zlib = require "zlib"
                        local stream = zlib.inflate()
                        if not stream then
                                ngx.log(ngx.ERR, "Failed to create zlib stream: ", err)
                                return
                        end
                        local uncompressed_body, err = stream(message)
                        send_rsyslog(uncompressed_body)
                end

                local headers = ngx.req.get_headers()
                ngx.log(ngx.ERR, headers["Content-Encoding"]);
                if headers["Content-Encoding"] == "gzip" then
                        send_rsyslog_inflate(request_body)
                else
                        send_rsyslog(request_body)
                end

                -- Respond to the client
                ngx.say("Request body forwarded to syslog")
                ngx.exit(ngx.HTTP_OK)
            }
        }
    }
}
